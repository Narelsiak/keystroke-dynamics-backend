/**
* This file is auto-generated by nestjs-proto-gen-ts
*/

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export namespace keystroke {
    export interface KeyPress {
        value?: string;
        pressDuration?: number;
        waitDuration?: number;
        shift?: boolean;
        ctrl?: boolean;
        alt?: boolean;
        meta?: boolean;
    }
    export interface TrainStats {
        samples?: number;
        finalLoss?: number;
        minLoss?: number;
        maxLoss?: number;
        avgLoss?: number;
        stdLoss?: number;
    }
    export interface Attempt {
        keyPresses?: keystroke.KeyPress[];
    }
    export interface TrainRequest {
        attempts?: keystroke.Attempt[];
        email?: string;
    }
    export interface TrainResponse {
        message?: string;
        stats?: keystroke.TrainStats;
        id?: string;
    }
    // train end
    export interface ModelCountRequest {
        email?: string;
    }
    export interface ModelCountResponse {
        count?: number;
    }
    export interface DeleteModelRequest {
        email?: string;
        modelName?: string;
    }
    export interface DeleteModelResponse {
        message?: string;
        success?: boolean;
    }
    // delete end
    export interface EvaluateStats {
        samples?: number;
        pressAvg?: number;
        pressStd?: number;
        waitAvg?: number;
        waitStd?: number;
    }
    export interface EvaluationAttempt {
        keyPresses?: keystroke.KeyPress[];
        isAnomalous?: boolean;
        score?: number;
        message?: string;
    }
    export interface EvaluateRequest {
        attempts?: keystroke.Attempt[];
    }
    export interface EvaluateResponse {
        message?: string;
        stats?: keystroke.EvaluateStats;
        results?: keystroke.EvaluationAttempt[];
        anomalies?: string[];
    }
    export interface PredictRequest {
        modelName?: string;
        attempt?: keystroke.Attempt;
        email?: string;
    }
    export interface PredictResponse {
        success?: boolean;
        similarity?: number;
        error?: number;
    }
    export interface KeystrokeService {
        train(
            data: TrainRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<TrainResponse>;
        getModelCount(
            data: ModelCountRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<ModelCountResponse>;
        deleteModel(
            data: DeleteModelRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<DeleteModelResponse>;
        evaluate(
            data: EvaluateRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<EvaluateResponse>;
        predict(
            data: PredictRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<PredictResponse>;
    }
}

